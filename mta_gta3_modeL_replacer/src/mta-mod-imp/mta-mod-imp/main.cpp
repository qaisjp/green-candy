/*
	GTA model importer creator for mtasa dm.
	This executable creates files which are needed due to limitation of mtasa dm.
	Created by The_GTA
*/
#include "main.h"

enum eStreamMethod
{
	STREAM_STREAM,
	STREAM_DISTANCE
};

CIPL *ipls[256];
unsigned int numIPL = 0;
CIDE *ides[256];
unsigned int numIDE = 0;
bool modelLOD[65536];
bool avalID[65536];
bool mtaBLUE;
unsigned int jetpackHeight;
bool lodSupport;
bool staticCompile;
bool cached;
bool debug;
unsigned int streamerMemory;
eStreamMethod streamMethod;

instanceList_t instances;
objectList_t objects;
objectList_t lod;
lodMap_t lodMap;
std::map <unsigned short, CObject*> backLodMap;
unsigned int tableCount = 0;
unsigned int numAvailable = 0;

short usYoffset=0;
short usXoffset=0;
short usZoffset=500;

#define MAP_LUA 1
#define MAP_XML 2
#define MAP_METHOD MAP_XML
#define MAP_MAXLOD TRUE

#define MODEL_TABLE 1
#define MODEL_STATIC 2
#define MODEL_METHOD MODEL_TABLE

#define LUA_DOCOMPILE TRUE

inline void luaBegin( FILE *file )
{
	fprintf( file, 
		"-- File generated by MTASA model importer\n"
	);

	if ( debug )
	{
		fprintf( file,
			"local modelsLoaded={};\n"
		);
	}

	if ( cached )
	{
		fprintf( file,
			"local streamerMemory=0;\n" \
			"local cached={};\n" \
			"local resourceQueue={};\n"
		);
	}

	fprintf( file,
		"local textureCache = {};\n" \
		"local streamedObjects = {};\n" \
		"local pModels = {};\n\n" \
		"setCloudsEnabled(false);\n"
	);

	if ( !lodSupport )
	{
		fprintf( file,
			"setFarClipDistance(350);\n" \
			"setFogDistance(10);\n"
		);
	}

	fprintf( file,
		"debug.sethook(nil);\n\n"
	);

	fprintf( file,
		"local function getResourceSize(path)\n" \
		"	if not (fileExists(path)) then return 0; end;\n\n" \
		"	local file = fileOpen(path);\n" \
		"	local size = fileGetSize(file)\n\n" \
		"	fileClose(file);\n" \
		"	return size;\n" \
		"end\n\n" \
		"local function requestTexture(model, path)\n" \
		"	local txd = textureCache[path];\n\n" \
		"	if not (txd) then\n"
		"		local size = getResourceSize(path);\n" \
		"		if (size == 0) then return false; end\n\n" \
	);

	if ( cached )
	{
		fprintf( file,
			"		if ( streamerMemory + size > %u ) then\n" \
			"			outputDebugString(\"out of streaming memory! (\"..path..\")\");\n" \
			"			return false;\n" \
			"		end\n\n", streamerMemory
		);
	}

	fprintf( file,
		"		txd = engineLoadTXD(path);\n\n" \
		"		if not (txd) then\n" \
		"			return false;\n" \
		"		end\n\n" \
		"		textureCache[path] = txd;\n"
	);

	if ( cached )
	{
		fprintf( file,
			"		streamerMemory = streamerMemory + size;\n"
		);
	}

	fprintf( file,
		"	end\n" \
		"	return txd;\n" \
		"end\n\n"
	);

	if ( cached )
	{
		fprintf( file,
			"local function loadResources(model, size)\n" \
			"	engineImportTXD(model.txd, model.id);\n\n" \
			"	model.model = engineLoadDFF(model.model_file, 0);\n\n" \
			"	if not (model.model) then return false; end;\n\n" \
			"	model.col = engineLoadCOL(model.col_file, 0);\n\n" \
			"	if not (model.col) then return false; end;\n\n" \
			"	cached[model.id] = {\n" \
			"		model = model,\n" \
			"		size = size\n" \
			"	};\n" \
			"	resourceQueue[model.id] = nil;\n" \
			"	streamerMemory = streamerMemory + size;\n" \
			"	return true;\n" \
			"end\n\n" \
			"local function freeResources(model)\n" \
			"	local cache = cached[model.id];\n\n" \
			"	if not (cache) then return true; end\n\n" \
			"	destroyElement(model.model);\n" \
			"	destroyElement(model.col);\n" \
			"	model.model = nil;\n" \
			"	model.col = nil;\n" \
			"	cached[model.id] = nil;\n" \
			"	streamerMemory = streamerMemory - cache.size;\n" \
			"	return true;\n" \
			"end\n\n" \
			"local function cacheResources(model)\n" \
			"	if (resourceQueue[model.id]) then return false; end\n\n" \
			"	if (cached[model.id]) then return true; end\n\n" \
			"	local size = getResourceSize(model.model_file) + getResourceSize(model.col_file);\n\n" \
			"	if ( streamerMemory + size > %u ) then\n" \
			"		outputDebugString(\"streamer memory limit reached... queueing request!\");\n\n" \
			"		resourceQueue[model.id] = {\n" \
			"			size = size,\n" \
			"			model = model\n" \
			"		};\n" \
			"		return false;\n" \
			"	end\n\n" \
			"	return loadResources(model, size);\n" \
			"end\n\n", streamerMemory
		);
	}

	fprintf( file,
		"local function loadModel(model)\n" \
		"	if (model.loaded) then return true; end\n\n"
	);

	if ( cached )
	{
		fprintf( file,
			"	if not (cacheResources(model)) then return false; end\n\n"
		);
	}

	if ( streamMethod == STREAM_STREAM )
	{
		fprintf( file,
			"	model.isRequesting = 2;\n"
		);
	}

	fprintf( file,
		"	engineReplaceModel(model.model, model.id);\n" \
		"	engineReplaceCOL(model.col, model.id);\n"
	);

	if ( streamMethod == STREAM_STREAM )
	{
		fprintf( file,
			"	if (model.isRequesting == 2) then\n" \
			"		model.isRequesting = false;\n" \
			"	end\n\n"
		);
	}

	fprintf( file,
		"	model.loaded = true;\n"
	);

	if ( debug )
	{
		fprintf( file,
			"	table.insert(modelsLoaded, model);\n"
		);
	}

	fprintf( file,
		"	return true;\n" \
		"end\n\n" \
		"local function freeModel(model)\n" \
		"	if not (model.loaded) then return true; end\n\n"
	);

	if ( streamMethod == STREAM_STREAM )
	{
		fprintf( file,
			"	model.isRequesting = 3;\n"
		);
	}

	fprintf( file,
		"	engineRestoreModel(model.id);\n" \
		"	engineRestoreCOL(model.id);\n"
	);

	if ( streamMethod == STREAM_STREAM )
	{
		fprintf( file,
			"	model.isRequesting = false;\n"
		);
	}

	if ( debug )
	{
		fprintf( file,
			"	for m,n in ipairs(modelsLoaded) do\n" \
			"		if (model == n) then\n" \
			"			table.remove(modelsLoaded, m);\n" \
			"			break;\n" \
			"		end\n" \
			"	end\n"
		);
	}

	fprintf( file,
		"	model.loaded = false;\n" \
		"end\n\n"
	);
}

inline void luaMethodBegin( FILE *file )
{
	switch( streamMethod )
	{
	case STREAM_DISTANCE:
		fprintf( file, 
			"local function modelStreamOut ()\n" \
			"	local pModel = pModels[getElementModel(source)];\n\n" \
			"	if not (pModel) then return end;\n\n" \
			"	pModel.numStream = pModel.numStream - 1;\n\n" \
			"	if (pModel.numStream == 0) then\n" \
			"		freeModel(pModel);\n" \
			"	end\n" \
			"end\n\n" \
			"local function modelStreamIn ()\n" \
			"	local pModel = pModels[getElementModel(source)];\n\n" \
			"	if not (pModel) then return end;\n\n" \
			"	pModel.numStream = pModel.numStream + 1;\n\n" \
			"	if not (loadModel(pModel)) then\n" \
			"		setElementInterior(source, 123);\n" \
			"		setElementCollisionsEnabled(source, false);\n" \
			"		return false;\n" \
			"	end\n" \
			"end\n\n"
		);
		return;
	case STREAM_STREAM:
		fprintf( file,
			"local function modelStreamOut ()\n" \
			"	local pModel = pModels[getElementModel(source)];\n\n" \
			"	if not (pModel) then return end;\n\n" \
			"	if (pModel.isRequesting == 2) then\n" \
			"		pModel.isRequesting = 1;\n" \
			"		return true;\n" \
			"	elseif (pModel.isRequesting == 3) then\n" \
			"		pModel.isRequesting = 4;\n" \
			"		return true;\n" \
			"	end\n\n" \
			"	pModel.numStream = pModel.numStream - 1;\n\n" \
			"	if (pModel.numStream == 0) then\n" \
			"		freeModel(pModel);\n" \
			"	end\n" \
			"end\n\n" \
			"local function modelStreamIn ()\n" \
			"	local pModel = pModels[getElementModel(source)];\n\n" \
			"	if not (pModel) then return end;\n\n" \
			"	if (pModel.isRequesting == 1) then\n" \
			"		pModel.isRequesting = false;\n" \
			"		return true;\n" \
			"	end\n\n" \
			"	pModel.numStream = pModel.numStream + 1;\n\n" \
			"	if (pModel.loaded) then return true; end;\n\n" \
			"	if not (loadModel(pModel)) then\n" \
			"		setElementInterior(source, 123);\n" \
			"		setElementCollisionsEnabled(source, false);\n" \
			"		return false;\n" \
			"	end\n" \
			"end\n\n"
		);
		return;
	}
}

inline void luaModelBeginLoader( FILE *file )
{
	fprintf( file,
		"function loadModels ()\n" \
		"	local pModel, pTXD, pColl, pTable;\n\n"
	);
}

inline void luaModelLoadBegin( FILE *file )
{
	if (!staticCompile)
	{
		fprintf( file,
			"	pTable={\n"
		);
	}
}

inline void luaModelLoadEntry( FILE *file, const char *name, const char *txdName, unsigned short id, const char *lod, unsigned short lodID )
{
	if (staticCompile)
	{
		fprintf( file,
			"	pModels[%u]={};\n" \
			"	pTable=pModels[%u];\n" \
			"	pTable.txd=requestTexture(pTable, \"textures/%s.txd\");\n" \
			"	engineImportTXD(pTable.txd, %u);\n", id, id, txdName, id
		);

		if ( cached )
		{
			fprintf( file,
				"	pTable.model_file=\"models/%s.dff\";\n" \
				"	pTable.col_file=\"coll/%s.col\";\n"
			);
		}
		else
		{
			fprintf( file,
				"	pTable.model=engineLoadDFF(\"models/%s.dff\",0);\n" \
				"	pTable.col=engineLoadCOL(\"coll/%s.col\");\n", name, name
			);
		}

		fprintf( file,
			"	pTable.numStream=0;\n" \
			"	pTable.lod=%s;\n" \
			"	pTable.id=%u;\n" \
			"	engineSetModelLODDistance(%u, %s);\n", lod, id, id, lod
		);

		if ( lodSupport && lodID != 0 )
		{
			fprintf( file,
				"\n" \
				"	for m,n in ipairs(getElementsByType(\"object\", resourceRoot)) do\n" \
				"		local x, y, z = getElementPosition(n);\n" \
				"		local rx, ry, rz = getElementRotation(n);\n" \
				"		setLowLODElement(n, createObject(%u, x, y, z, rx, ry, rz, true));\n" \
				"	end\n\n", lodID
			);
		}
	}
	else
	{
		if ( tableCount++ != 0 )
			fprintf( file, ",\n" );

		fprintf( file, 
			"		{ model=%u, model_file=\"%s\", txd_file=\"%s\", coll_file=\"%s\", lod=%s", id, name, txdName, name, lod
		);

		if ( lodSupport && lodID != 0 )
			fprintf( file, ", lod_id=%u }", lodID );
		else
			fprintf( file, " }" );
	}
}

inline void luaModelLODBegin( FILE *file )
{
	if ( !staticCompile )
	{
		fprintf( file,
			"	pTable={\n"
		);
	}
}

inline void luaModelLODEntry( FILE *file, unsigned short id, const char *name, const char *txdName, const char *lod )
{
	if ( !staticCompile )
	{
		if ( tableCount++ != 0 )
			fprintf( file, ",\n" );
		
		fprintf( file,
			"		{ %u, \"%s\", \"%s\", \"%s\", %s }", id, name, name, txdName, lod
		);
	}
	else
	{
		fprintf( file,
			"	engineImportTXD(requestTexture(false, \"textures/%s.txd\"), %u);\n" \
			"	engineReplaceModel(engineLoadDFF(\"models/%s.dff\", 0), %u);\n" \
			"	engineReplaceCOL(engineLoadCOL(\"coll/%s.col\"), %u);\n", txdName, id, name, id, name, id
		);

		fprintf( file,
			"	engineSetModelLODDistance(%u, %s);\n", id, lod
		);
	}
}

inline void luaModelLODEnd( FILE *file )
{
	if ( !staticCompile )
	{
		fprintf( file,
			"\n" \
			"	};\n\n" \
			"	for m,n in ipairs(pTable) do\n" \
			"		engineImportTXD(requestTexture(false, \"textures/\"..n[4]..\".txd\"), n[1]);\n" \
			"		engineReplaceModel(engineLoadDFF(\"models/\"..n[2]..\".dff\", 0), n[1]);\n" \
			"		engineReplaceCOL(engineLoadCOL(\"coll/\"..n[3]..\".col\"), n[1]);\n" \
			"		engineSetModelLODDistance(n[1], n[5] / 5);\n" \
			"	end\n" \
		);
	}

	fprintf( file, "\n" );

	tableCount = 0;
}

inline void luaModelLoadEnd( FILE *file )
{
	if (!staticCompile)
	{
		fprintf( file,
			"\n" \
			"	};\n\n" \
			"	local n,m;\n\n" \
			"	for n,m in ipairs(pTable) do\n" \
			"		pModels[m.model]={};\n" \
			"		pModelEntry=pModels[m.model];\n" \
			"		pModelEntry.name = m.model_file;\n" \
			"		pModelEntry.txd=requestTexture(pModelEntry, \"textures/\"..m.txd_file..\".txd\");\n"
		);

		if ( cached )
		{
			fprintf( file,
				"		pModelEntry.model_file=\"models/\"..m.model_file..\".dff\";\n" \
				"		pModelEntry.col_file=\"coll/\"..m.coll_file..\".col\";\n"
			);
		}
		else
		{
			fprintf( file, 
				"		engineImportTXD(pModelEntry.txd, m.model);\n" \
				"		pModelEntry.model=engineLoadDFF(\"models/\"..m.model_file..\".dff\",0);\n" \
				"		pModelEntry.col=engineLoadCOL(\"coll/\"..m.coll_file..\".col\");\n"
			);
		}

		fprintf( file,
			"		pModelEntry.numStream=0;\n" \
			"		pModelEntry.lod=m.lod;\n" \
			"		pModelEntry.id=m.model;\n" \
			"		engineSetModelLODDistance(m.model, m.lod);\n\n"
		);

		if ( lodSupport )
		{
			fprintf( file,
				"		if (m.lodID) then\n" \
				"			for j,k in ipairs(getElementsByType(\"object\", resourceRoot)) do\n" \
				"				if (getElementModel(k) == m.model) then\n" \
				"					local x, y, z = getElementPosition(k);\n" \
				"					local rx, ry, rz = getElementRotation(k);\n" \
				"					setLowLODElement(k, createObject(m.lodID, x, y, z, rx, ry, rz, true));\n" \
				"				end\n" \
				"			end\n" \
				"		end\n"
			);
		}

		fprintf( file,
			"	end\n"
		);
	}

	fprintf( file, 
		"end\n" \
		"loadModels();\n\n"
	);
}

inline void luaMethodEnd( FILE *file )
{
	switch( streamMethod )
	{
	case STREAM_DISTANCE:
		fprintf( file,
			"addEventHandler(\"onClientPreRender\", root, function()\n" \
			"		local m,n;\n" \
			"		local objects = getElementsByType(\"object\", resourceRoot);\n" \
			"		local x, y, z = getElementPosition(localPlayer);\n\n" \
			"		for m,n in ipairs(objects) do\n" \
			"			local model = pModels[getElementModel(n)];\n\n" \
			"			if (model) then\n" \
			"				local streamObject = streamedObjects[n];\n" \
			"				local distance = getDistanceBetweenPoints3D(x, y, z, getElementPosition(n));\n\n" \
			"				if not (streamObject) then\n" \
			"					if (distance < model.lod) then\n" \
			"						source = n;\n\n" \
			"						modelStreamIn();\n\n" \
			"						streamedObjects[n] = true;\n" \
			"					end\n" \
			"				elseif (distance > model.lod) then\n" \
			"					source = n;\n\n" \
			"					modelStreamOut();\n\n" \
			"					streamedObjects[n] = nil;\n" \
			"				end\n" \
			"			end\n" \
			"		end\n" \
			"	end\n" \
			");\n\n"
		);
		return;
	case STREAM_STREAM:
		fprintf( file,
			"for m,n in ipairs(getElementsByType(\"object\", resourceRoot)) do\n" \
			"	if (isElementStreamedIn(n)) then\n" \
			"		source = n;\n" \
			"		modelStreamIn();\n" \
			"		streamedObjects[n] = true;\n" \
			"	end\n" \
			"end\n\n" \
			"addEventHandler(\"onClientElementStreamIn\", resourceRoot, function()\n" \
			"		modelStreamIn();\n\n" \
			"		streamedObjects[source] = true;\n" \
			"	end\n" \
			");\n" \
			"addEventHandler(\"onClientElementStreamOut\", resourceRoot, function()\n" \
			"		modelStreamOut();\n\n" \
			"		streamedObjects[source] = nil;\n" \
			"	end\n" \
			");\n\n"
		);
		return;
	}
}

inline void luaEnd( FILE *file )
{
	if ( cached )
	{
		fprintf( file,
			"local function getBiggestCacheObject()\n" \
			"	local obj;\n" \
			"	local size = 0;\n\n" \
			"	for m,n in pairs(cached) do\n" \
			"		if (size < n.size) and not (n.model.loaded) then\n" \
			"			size = n.size;\n" \
			"			obj = n.model;\n" \
			"		end\n" \
			"	end\n" \
			"	return obj, size;\n" \
			"end\n\n" \
			"addEventHandler(\"onClientRender\", root, function()\n" \
			"		local _,request = ({ pairs(resourceQueue) })[1]( resourceQueue );\n" \
			"		if not (request) then return true; end;\n\n" \
			"		while ( streamerMemory + request.size > %u ) do\n" \
			"			local cacheObj = getBiggestCacheObject();\n" \
			"			if not (cacheObj) then\n" \
			"				outputDebugString(\"waiting for cache objects...\");\n" \
			"				return true;\n" \
			"			end\n\n" \
			"			freeResources(cacheObj);\n" \
			"		end\n" \
			"		resourceQueue[request.model.id] = nil;\n\n" \
			"		if not (loadModel(request.model)) then return false; end\n\n" \
			"		local m,n;\n" \
			"		for m,n in ipairs(getElementsByType(\"object\", resourceRoot)) do\n" \
			"			if (getElementModel(n) == request.model.id) then\n" \
			"				setElementInterior(n, 0);\n" \
			"				setElementCollisionsEnabled(n, true);\n" \
			"			end\n" \
			"		end\n" \
			"	end\n" \
			");\n\n" \
			"addCommandHandler(\"mcollect\", function()\n" \
			"		outputDebugString(\"collecting map garbage...\");\n\n" \
			"		for m,n in pairs(cached) do\n" \
			"			if (n.model.loaded == false) then\n" \
			"				freeResources(n.model);\n" \
			"			end\n" \
			"		end\n" \
			"		collectgarbage();\n" \
			"	end\n" \
			");\n\n" \
			"addCommandHandler(\"mapmem\", function()\n" \
			"		outputChatBox(\"streamer memory: \"..streamerMemory..\" out of %u\");\n" \
			"	end\n" \
			");\n\n", streamerMemory, streamerMemory
		);
	}
	else
	{
		fprintf( file,
			"addEventHandler(\"onClientResourceStop\", resourceRoot, function()\n" \
			"		for m,n in pairs(pModels) do\n" \
			"			if (isElement(n.col)) then destroyElement(n.col); end\n" \
			"			if (isElement(n.model)) then destroyElement(n.model); end\n" \
			"			engineRestoreCOL(m);\n" \
			"			engineRestoreModel(m);\n" \
			"		end\n" \
			"	end\n" \
			");\n\n"
		);
	}

	if ( debug )
	{
		fprintf( file,
			"addEventHandler(\"onClientRender\", root, function()\n" \
			"		local screenX, screenY = guiGetScreenSize();\n"
		);

		if ( cached )
		{
			fprintf( file,
				"		local perc = streamerMemory / %u;\n\n" \
				"		dxDrawText(\"streamerMemory: \" .. streamerMemory .. \" / %u (\" .. math.floor(perc * 100) .. \")\", screenX - 300, screenY - 100);\n" \
				"		dxDrawRectangle(screenX - 300, screenY - 80, 225, 40);\n" \
				"		dxDrawRectangle(screenX - 298, screenY - 78, 221, 36, tocolor(0, 0, 0, 255));\n" \
				"		dxDrawRectangle(screenX - 297, screenY - 77, 219 * perc, 34);\n", streamerMemory, streamerMemory
			);
		}

		fprintf( file,
			"		dxDrawText(\"Models loaded: \" .. #modelsLoaded, screenX - 300, screenY - 120);\n" \
			"		for m,n in ipairs(modelsLoaded) do\n" \
			"			dxDrawText(n.name .. \" (\" .. n.numStream .. \", \" .. tostring(n.isRequesting) .. \")\", 50, 160 + m * 15);\n" \
			"		end\n" \
			"	end\n" \
			");\n\n"
		);
	}

	fprintf( file,
		"collectgarbage();\n" \
		"setJetpackMaxHeight(%u);\n", usZoffset + jetpackHeight
	);
}

const char *pServerHeader=
	"-- Automatically generated server script by MTASA map IPL map converter\n" \
	"setMapName(\"United\");\n";
#if (MAP_METHOD==MAP_LUA)
const char *pServerMapHeader=
	"function loadMap ()\n" \
	"	local pObj;\n\n";
const char *pServerMapEntry=
	"	pObj=createObject(%u,%f,%f,%f);\n" \
	"	setElementID(pObj,\"%s\");\n";
const char *pServerMapEntry2=
	"	setObjectRotation(pObj,%u,%u,%u);\n";
const char *pServerMapEnd=
	"end;\n" \
	"loadMap();\n";
#endif
const char *pServerEnd=
	"-- The end\n";
#if (MAP_METHOD==MAP_XML)
const char *pMapHeader=
	"<map edf:definitions=\"editor_main\">\n";
const char *pMapEntry=
	"	<object id=\"%s\" dimension=\"0\" interior=\"0\" model=\"%u\" posX=\"%f\" posY=\"%f\" posZ=\"%f\" ";
const char *pMapEntry2=
	"rotX=\"%u\" rotY=\"%u\" rotZ=\"%u\" />\n";
char *pMapEnd=
	"</map>\n";
#endif
const char *pMetaHeader=
	"<meta>\n" \
	"	<info author=\"The_GTA\" description=\"Automatically generated map file by MTASA map converter\" version=\"1.2\" type=\"map\" />\n";
#if (MAP_METHOD==MAP_XML)
const char *pMetaHeaderMap=
	"	<map src=\"gta3.map\" />\n";
#endif
const char *pMetaHeader2=
	"	<script src=\"%s\" type=\"client\" />\n" \
	"	<script src=\"main_server.lua\" type=\"server\" />\n";
const char *pMetaEntryTXD=
	"	<file src=\"models\\%s.dff\" type=\"client\" />\n" \
	"	<file src=\"coll\\%s.col\" type=\"client\" />\n" \
	"	<file src=\"textures\\%s.txd\" type=\"client\" />\n";
const char *pMetaEntry=
	"	<file src=\"models\\%s.dff\" type=\"client\" />\n" \
	"	<file src=\"coll\\%s.col\" type=\"client\" />\n";
const char *pMetaEnd=
	"</meta>\n";

bool FileExists(const char *fileName)
{
    return (GetFileAttributes(fileName) != 0xFFFFFFFF);
}

CObject*	GetObjectByModel(const char *model)
{
	objectList_t::iterator iter;

	for (iter = objects.begin(); iter != objects.end(); iter++)
		if (strcmp((*iter)->m_modelName, model) == 0)
			return *iter;
	
	return NULL;
}

// Process data
void	LoadTargetIPL(const char *filename)
{
	unsigned int numInst = 0;
	CIPL *ipl;
	instanceList_t::iterator i_iter;

	ipl = LoadIPL(filename);

	for (i_iter = ipl->m_instances.begin(); i_iter != ipl->m_instances.end(); i_iter++, numInst++)
	{
		if (!lodSupport)
		{
			if (ipl->IsLOD(numInst))
				continue;
		}
		else if ( CInstance *lod = ipl->GetLod( *i_iter ) )
			lodMap[lod->m_modelID] = *i_iter;

		instances.push_back(*i_iter);
	}

	ipls[numIPL++] = ipl;
}

void	LoadTargetIDE(const char *name)
{
	CIDE *ide = LoadIDE(name);
	objectList_t::iterator iter;

	if (!ide)
	{
		printf("could not load '%s' file!", name);
		getchar();

		exit(EXIT_FAILURE);
	}

	for (iter = ide->m_objects.begin(); iter != ide->m_objects.end(); iter++)
	{
		if ( lodSupport )
		{
			//TODO: One lod to multiple objects!
			if ( CInstance *inst = lodMap[(*iter)->m_modelID] )
			{
				lod.push_back(*iter);
				backLodMap[inst->m_modelID] = *iter;
			}
		}

		objects.push_back(*iter);
	}
}

void	LoadReplaceIPL(const char *filename)
{
	CIPL *ipl = LoadIPL(filename);
	instanceList_t::iterator iter;
	unsigned int numInst = 0;

	for ( iter = ipl->m_instances.begin(); iter != ipl->m_instances.end(); iter++, numInst++ )
		modelLOD[(*iter)->m_modelID] = (ipl->IsLOD( numInst ) || (*iter)->m_lod != -1);

	delete ipl;
}

void	LoadReplaceIDE(const char *filename)
{
	CIDE *ide = LoadIDE(filename);
	objectList_t::iterator iter;

	// Marks all ids as available
	for (iter = ide->m_objects.begin(); iter != ide->m_objects.end(); iter++)
	{
		if ((*iter)->m_flags & (OBJECT_SCM | OBJECT_NOLOD | OBJECT_GRAFFITI | OBJECT_STATUE | OBJECT_UNKNOWN | OBJECT_UNKNOWN_2 | OBJECT_ALPHA1 | OBJECT_ALPHA2 | OBJECT_BREAKGLASS | OBJECT_BREAKGLASS_CRACK | OBJECT_GARAGE | OBJECT_MULTICLUMP | OBJECT_USE_POLYSHADOW | OBJECT_EXPLOSIVE | OBJECT_GRAFFITI | OBJECT_VEGETATION | OBJECT_BIG_VEGETATION | OBJECT_UNKNOWN_HIGH))
		//if ((*iter)->m_flags != 0 && !((*iter)->m_flags & OBJECT_INTERIOR))
			continue;

		if (mtaBLUE && modelLOD[(*iter)->m_modelID])
			continue;

		avalID[(*iter)->m_modelID] = true;
		numAvailable++;
	}

	delete ide;
}

const char *names[65536];
unsigned short modelIDs[65536];
const char *txdNames[65536];
const char *txdName;
unsigned short usNames = 0;
unsigned short usTxdNames = 0;
char lodBuffer[128];
FILE *pMetaFile;

inline bool AllocateResources( const char *name )
{
	char buffer[1024];
	char copyBuffer[1024];
	unsigned int m;

	// Copy the model file
	_snprintf(buffer, 1023, "..\\resources\\%s.dff", name);

	if (!FileExists(buffer))
	{
		printf("error: model missing (%s)\n", buffer);
		return false;
	}

	_snprintf(copyBuffer, 1023, "..\\output\\models\\%s.dff", name);

	if (CopyFile(buffer, copyBuffer, true))
		printf("copying model '%s'\n", name);

	// Now the collision
	_snprintf(buffer, 1023, "..\\resources\\%s.col", name);

	if (!FileExists(buffer))
	{
		printf("error: collision missing (%s)\n", buffer);
		return false;
	}

	_snprintf(copyBuffer, 1023, "..\\output\\coll\\%s.col", name);

	if (CopyFile(buffer, copyBuffer, true))
		printf("copying collision '%s'\n", name);

	// Assign the ID
	names[usNames] = name;

	for (m=0; m<65534; m++)
	{
		if (avalID[m])
		{
			avalID[m] = false;
			break;
		}
	}
	if (m == 65534)
	{
		printf("Internal Error!\n");

		getchar();
		return false;
	}

	modelIDs[usNames++] = m;

	CObject *txdObj = GetObjectByModel(name);

	if (txdObj)
	{
		unsigned int k;

		if (lodSupport)
			_snprintf(lodBuffer, 127, "%.0f", txdObj->m_drawDistance);
		else
			strcpy(lodBuffer, "500");

		txdName = txdObj->m_textureName;

		for (k=0; k < usTxdNames; k++)
			if (strcmp(txdNames[k], txdName) == 0)
				break;

		// Little hack
		if (k == usTxdNames)
		{
			// Copy over resources
			_snprintf(buffer, 1023, "..\\resources\\%s.txd", txdName);

			if (!FileExists(buffer))
				printf("texture missing: %s (ignoring)\n", buffer);
			else
			{
				_snprintf(copyBuffer, 1023, "..\\output\\textures\\%s.txd", txdName);

				// Copy the resource over
				if (CopyFile(buffer, copyBuffer, true))
					printf("copying texture '%s'\n", txdName);
			}

			fprintf(pMetaFile, pMetaEntryTXD, name, name, txdName);

			txdNames[usTxdNames++] = txdName;
		}
		else
			fprintf(pMetaFile, pMetaEntry, name, name);
	}
	else
	{
		txdName = "_";
		strcpy(lodBuffer, "500");

		printf("could not find object def for '%s'\n", name);

		fprintf(pMetaFile, pMetaEntry, name, name);
	}
	return true;
}

// Entry
int		main (int argc, char *argv[])
{
	WIN32_FIND_DATA findData;
	HANDLE find;
	unsigned int n;
	FILE *pLuaFile;
#if (MAP_METHOD==MAP_XML)
	FILE *pMapFile;
#endif
	FILE *pLuaServer;
	instanceList_t::iterator iter;
	CINI *config = LoadINI("config.ini");
	CINI::Entry *mainEntry;

	if (config && (mainEntry = config->GetEntry("Main")))
	{
		// Apply configuration
		usXoffset = mainEntry->GetInt("xOffset");
		usYoffset = mainEntry->GetInt("yOffset");
		usZoffset = mainEntry->GetInt("zOffset");
		mtaBLUE = mainEntry->GetBool("mtaBLUE");
		jetpackHeight = (unsigned int)mainEntry->GetInt("jetpackHeight");
		lodSupport = mainEntry->GetBool("lodSupport");
		staticCompile = mainEntry->GetBool("static");
		cached = mainEntry->GetBool("cached");
		streamerMemory = (unsigned int)mainEntry->GetInt("streamerMemory") * 1024 * 1024;
		debug = mainEntry->GetBool("debug");

		const char *method = mainEntry->Get("method");

		if ( strcmp(method, "stream") == 0 )
		{
			streamMethod = STREAM_STREAM;

			printf( "WARNING: This method might not work with asynchronous loading\n" );
		}
		else if ( strcmp(method, "distance") == 0 )
			streamMethod = STREAM_DISTANCE;
		else
		{
			printf( "Invalid streaming method; defaulting to distance\n" );

			streamMethod = STREAM_DISTANCE;

			goto nonotify;
		}

		if (lodSupport)
			printf( "WARNING: Compiling with lod support does not guarrante an error-free mainworld\n" );

		printf( "Using StreamingMethod: %s\n", method );
	}
	else
	{
		// Default disabled
		mtaBLUE = false;
		jetpackHeight = 1000;
		lodSupport = false;
		staticCompile = false;
		cached = false;
		debug = false;
	}

nonotify:
	if (mtaBLUE)
		printf( "Compiling with MTA:BLUE support...\n" );
	
	// Reset the IDs
	for (n=0; n < 65536; n++)
		avalID[n] = false;

	// We change into ipl directory
	SetCurrentDirectory("ipl\\");

	numIPL = 0;
	numIDE = 0;

	// We scan through all ipl files and load em
	if ((find = FindFirstFile("*.ipl", &findData)) == INVALID_HANDLE_VALUE)
	{
		printf( "ERROR: Could not find any item placement files (ipl/.ipl)" );

		getchar();
		return EXIT_FAILURE;
	}

	LoadTargetIPL(findData.cFileName);

	while (FindNextFile(find, &findData))
		LoadTargetIPL(findData.cFileName);

	FindClose(find);

#ifndef _SAME_NAME_METHOD
	// Now proceed through all .ide files
	if ((find = FindFirstFile("*.ide", &findData)) == INVALID_HANDLE_VALUE)
	{
		printf( "ERROR: Could not find any model definitions (ipl/.ide)\n" );

		getchar();
		return EXIT_FAILURE;
	}

	LoadTargetIDE(findData.cFileName);

	while (FindNextFile(find, &findData))
		LoadTargetIDE(findData.cFileName);

	FindClose(find);
#endif

	if (mtaBLUE)
	{
		memset( modelLOD, 0, sizeof(modelLOD) );

		// Load all GTA:SA static scene objects (hack)
		SetCurrentDirectory("..\\rplipl");

		if ((find = FindFirstFile("*.ipl", &findData)) == INVALID_HANDLE_VALUE)
		{
			printf("Error: Could not find any GTA:SA item placement information (rplipl/.ipl)\n");

			getchar();
			return EXIT_FAILURE;
		}

		LoadReplaceIPL( findData.cFileName );

		while (FindNextFile( find, &findData ))
			LoadReplaceIPL( findData.cFileName );

		FindClose( find );
	}

	// We must get all replacable IDE model ids
	SetCurrentDirectory("..\\rplide");

	if ((find = FindFirstFile("*.ide", &findData)) == INVALID_HANDLE_VALUE)
	{
		printf( "ERROR: Could not find GTA:SA model definitions" );

		getchar();
		return EXIT_FAILURE;
	}

	LoadReplaceIDE (findData.cFileName);

	while (FindNextFile(find, &findData))
		LoadReplaceIDE(findData.cFileName);

	FindClose(find);

	if (numAvailable < objects.size())
	{
		printf("ERROR: We require %u more valid model ids\n", objects.size() - numAvailable);

		getchar();
		return EXIT_FAILURE;
	}

	// Set up the directory scheme
	CreateDirectory("..\\output", NULL);

	SetCurrentDirectory("..\\output");

	CreateDirectory("models", NULL);
	CreateDirectory("textures", NULL);
	CreateDirectory("coll", NULL);

	// Create the .lua file
	pLuaFile=fopen("script.lua","w");
	pMetaFile=fopen("meta.xml","w");
#if (MAP_METHOD==MAP_XML)
	pMapFile=fopen("gta3.map","w");
#endif
	pLuaServer=fopen("main_server.lua","w");

	// Init files first
	luaBegin( pLuaFile );
	fprintf(pMetaFile, pMetaHeader);
	fprintf(pLuaServer,pServerHeader);
#if (MAP_METHOD==MAP_XML)
	fprintf(pMetaFile,pMetaHeaderMap);
	fwrite(pMapHeader,1,strlen(pMapHeader),pMapFile);
#elif (MAP_METHOD==MAP_LUA)
	fprintf(pLuaServer,pServerMapHeader);
#endif

	luaMethodBegin( pLuaFile );

	luaModelBeginLoader( pLuaFile );

#if (LUA_DOCOMPILE==TRUE)
	fprintf(pMetaFile, pMetaHeader2, "script.luac");
#else
	fprintf(pMetaFile, pMetaHeader2, "script.lua");
#endif

	if ( lodSupport )
	{
		objectList_t::iterator objIter;

		// LODs are loaded and stay this way
		luaModelLODBegin( pLuaFile );

		for ( objIter = lod.begin(); objIter != lod.end(); objIter++ )
		{
			unsigned int m;
			const char *name = (*objIter)->m_modelName;

			for (m=0; m<usNames; m++)
			{
				if (strcmp(names[m], name) == 0)
					break;
			}
			if (m != usNames)
				continue;

			if ( !AllocateResources( (*objIter)->m_modelName ) )
				continue;

			_snprintf( lodBuffer, 127, "%.0f", (*objIter)->m_drawDistance );

			(*objIter)->m_realModelID = modelIDs[usNames-1];

			luaModelLODEntry( pLuaFile, (*objIter)->m_realModelID, (*objIter)->m_modelName, (*objIter)->m_textureName, lodBuffer );
		}

		luaModelLODEnd( pLuaFile );
	}

	luaModelLoadBegin( pLuaFile );

	for (iter = instances.begin(); iter != instances.end(); iter++)
	{
		unsigned short m;
		const char *name = (*iter)->m_name;

		if ( lodSupport && lodMap[(*iter)->m_modelID] )
			continue;

		for (m=0; m < usNames; m++)
		{
			if (strcmp(name, names[m]) == 0)
				break;
		}
		if (m != usNames)
		{
#if (MAP_METHOD==MAP_XML)
			// We add all map entries
			fprintf(pMapFile, pMapEntry, name, modelIDs[m], (*iter)->m_position[0] + usXoffset, (*iter)->m_position[1] + usYoffset, (*iter)->m_position[2] + usZoffset);
			fprintf(pMapFile, pMapEntry2, (int)(*iter)->m_rotation[0], (int)(*iter)->m_rotation[1], (int)(*iter)->m_rotation[2]);
#elif (MAP_METHOD==MAP_LUA)
			// Yup, we script our elements
			fprintf(pLuaServer, pServerMapEntry, name, modelIDs[m], (*iter)->m_position[0] + usXoffset, (*iter)->m_position[1] + usYoffset, (*iter)->m_position[2] + usZoffset);
			fprintf(pLuaServer, pServerMapEntry2, (int)(*iter)->m_rotation[0], (int)(*iter)->m_rotation[1], (int)(*iter)->m_rotation[2]);
#endif
			continue;
		}

		if ( !AllocateResources( name ) )
			continue;

#if (MAP_METHOD==MAP_XML)
		// We add all map entries
		fprintf(pMapFile, pMapEntry, name, modelIDs[usNames-1], (*iter)->m_position[0] + usXoffset, (*iter)->m_position[1] + usYoffset, (*iter)->m_position[2] + usZoffset);
		fprintf(pMapFile, pMapEntry2, (int)(*iter)->m_rotation[0], (int)(*iter)->m_rotation[1], (int)(*iter)->m_rotation[2]);
#elif (MAP_METHOD==MAP_LUA)
		// Yup, we script our elements
		fprintf(pLuaServer, pServerMapEntry, name, modelIDs[usNames-1], (*iter)->m_position[0] + usXoffset, (*iter)->m_position[1] + usYoffset, (*iter)->m_position[2] + usZoffset);
		fprintf(pLuaServer, pServerMapEntry2, (int)(*iter)->m_rotation[0], (int)(*iter)->m_rotation[1], (int)(*iter)->m_rotation[2]);
#endif

		unsigned short lod = 0;

		if ( CObject *lodObj = backLodMap[(*iter)->m_modelID] )
			lod = lodObj->m_realModelID;

		// Now LUA
		luaModelLoadEntry( pLuaFile, name, txdName, modelIDs[usNames-1], lodBuffer, lod );
	}
	
	luaModelLoadEnd( pLuaFile );

#if (MAP_METHOD==MAP_XML)
	fprintf(pMapFile, pMapEnd);
#elif (MAP_METHOD==MAP_LUA)
	fprintf(pLuaServer, pServerMapEnd);
#endif

	luaMethodEnd( pLuaFile );

	fprintf(pLuaServer, pServerEnd);
	fprintf(pMetaFile, pMetaEnd);
	luaEnd( pLuaFile );
	// Close em
	fclose(pLuaFile);
	fclose(pMetaFile);
#if (MAP_METHOD==MAP_XML)
	fclose(pMapFile);
#endif

	SetCurrentDirectory("../");
#if (LUA_DOCOMPILE==TRUE)
	system("luac5.1.exe -o output/script.luac output/script.lua");

	DeleteFile("output/script.lua");
#endif

	// Success
	return EXIT_SUCCESS;
}